# rule_classes { #fave_recode.rule_classes }

`rule_classes`



## Classes

| Name | Description |
| --- | --- |
| [Condition](#fave_recode.rule_classes.Condition) | _A rule condition_ |
| [Rule](#fave_recode.rule_classes.Rule) | _A rule class_ |
| [RuleSet](#fave_recode.rule_classes.RuleSet) | A rule set class |

### Condition { #fave_recode.rule_classes.Condition }

`rule_classes.Condition(self, condition)`

_A rule condition_

#### Attributes

| Name      | Type               | Description                                 |
|-----------|--------------------|---------------------------------------------|
| attribute | str                | The attribute path for a `SequenceInterval` |
| relation  | Callable           | The relation function to be used            |
| set       | Union\[str, list\] | The comparison set                          |

#### Methods

| Name | Description |
| --- | --- |
| [check_condition](#fave_recode.rule_classes.Condition.check_condition) | _Check if the condition is met_ |
| [validate_condition](#fave_recode.rule_classes.Condition.validate_condition) | Validate wellformedness of condititions |

##### check_condition { #fave_recode.rule_classes.Condition.check_condition }

`rule_classes.Condition.check_condition(obj)`

_Check if the condition is met_

###### Parameters

| Name   | Type             | Description                                                  | Default    |
|--------|------------------|--------------------------------------------------------------|------------|
| `obj`  | SequenceInterval | The sequence interval against which the condition is checked | _required_ |

###### Returns

| Type   | Description   |
|--------|---------------|
| bool   | True or False |

##### validate_condition { #fave_recode.rule_classes.Condition.validate_condition }

`rule_classes.Condition.validate_condition(condition)`

Validate wellformedness of condititions

###### Parameters

| Name        | Type   | Description          | Default    |
|-------------|--------|----------------------|------------|
| `condition` | dict   | condition dictionary | _required_ |

###### Raises

| Type      | Description                        |
|-----------|------------------------------------|
| Exception | Any errors raised by the validator |

### Rule { #fave_recode.rule_classes.Rule }

`rule_classes.Rule(self, rule)`

_A rule class_

#### Attributes

| Name       | Type                   | Description           |
|------------|------------------------|-----------------------|
| rule       | str                    | The name of the rule  |
| conditions | list\[Condition, ...\] | A  list of conditions |
| output     | str                    | The rewrite output    |

#### Methods

| Name | Description |
| --- | --- |
| [apply_rule](#fave_recode.rule_classes.Rule.apply_rule) | _Apply a single rile_ |
| [validate_rule](#fave_recode.rule_classes.Rule.validate_rule) | _Validate the rule wellformedness_ |

##### apply_rule { #fave_recode.rule_classes.Rule.apply_rule }

`rule_classes.Rule.apply_rule(obj)`

_Apply a single rile_

###### Parameters

| Name   | Type             | Description                               | Default    |
|--------|------------------|-------------------------------------------|------------|
| `obj`  | SequenceInterval | The interval potentially being relabelled | _required_ |

###### Raises

| Type      | Description                           |
|-----------|---------------------------------------|
| Exception | Any errors in checking the conditions |

###### Returns

| Type   | Description                |
|--------|----------------------------|
| bool   | `True` if the rule applied |

##### validate_rule { #fave_recode.rule_classes.Rule.validate_rule }

`rule_classes.Rule.validate_rule(rule)`

_Validate the rule wellformedness_

###### Parameters

| Name   | Type   | Description         | Default    |
|--------|--------|---------------------|------------|
| `rule` | dict   | The rule dictionary | _required_ |

###### Raises

| Type      | Description                   |
|-----------|-------------------------------|
| Exception | Any errors from the validator |

### RuleSet { #fave_recode.rule_classes.RuleSet }

`rule_classes.RuleSet(self, rules=[], rule_path=None)`

A rule set class

Pass `RuleSet` either a rules dictionary, or a path 
to a rules yaml file

#### Parameters

| Name        | Type              | Description                 | Default   |
|-------------|-------------------|-----------------------------|-----------|
| `rules`     | list\[dict, ...\] | A list of rule dictionaries | `[]`      |
| `rule_path` | str               | A path to a rules .yml file | `None`    |

#### Attributes

| Name   | Type              | Description   |
|--------|-------------------|---------------|
| rules  | list\[Rule, ...\] |               |

#### Methods

| Name | Description |
| --- | --- |
| [apply_ruleset](#fave_recode.rule_classes.RuleSet.apply_ruleset) | _Apply the ruleset_ |
| [map_ruleset](#fave_recode.rule_classes.RuleSet.map_ruleset) | _Apply the ruleset to all sequences_ |
| [read_ruleset](#fave_recode.rule_classes.RuleSet.read_ruleset) | _read in a ruleset_ |

##### apply_ruleset { #fave_recode.rule_classes.RuleSet.apply_ruleset }

`rule_classes.RuleSet.apply_ruleset(obj)`

_Apply the ruleset_

The rules are checked against the Sequence interval
in sequence, and the first one applies, ceasing rule'
application.

###### Parameters

| Name   | Type             | Description                                      | Default    |
|--------|------------------|--------------------------------------------------|------------|
| `obj`  | SequenceInterval | The SequenceInterval undergoing rule application | _required_ |

##### map_ruleset { #fave_recode.rule_classes.RuleSet.map_ruleset }

`rule_classes.RuleSet.map_ruleset(obj)`

_Apply the ruleset to all sequences_

###### Parameters

| Name   | Type         | Description                   | Default    |
|--------|--------------|-------------------------------|------------|
| `obj`  | SequenceTier | A sequence tier to be recoded | _required_ |

##### read_ruleset { #fave_recode.rule_classes.RuleSet.read_ruleset }

`rule_classes.RuleSet.read_ruleset(path)`

_read in a ruleset_

###### Parameters

| Name   | Type   | Description         | Default    |
|--------|--------|---------------------|------------|
| `path` | str    | A path to a ruleset | _required_ |

###### Raises

| Type      | Description                          |
|-----------|--------------------------------------|
| Exception | Any errors in reading in the ruleset |

## Functions

| Name | Description |
| --- | --- |
| [rgetattr](#fave_recode.rule_classes.rgetattr) | _gets object attribute from string_ |

### rgetattr { #fave_recode.rule_classes.rgetattr }

`rule_classes.rgetattr(obj, attr, *args)`

_gets object attribute from string_

#### Parameters

| Name   | Type   | Description                   | Default    |
|--------|--------|-------------------------------|------------|
| `obj`  | _type_ | _object_                      | _required_ |
| `attr` | _str_  | attribute path attr.attr.attr | _required_ |